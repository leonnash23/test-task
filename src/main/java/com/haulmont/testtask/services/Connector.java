package com.haulmont.testtask.services;

import com.haulmont.testtask.model.Order;

import java.sql.*;

/**
 * Created by lech0816 on 13.04.2017.
 */
class Connector {
    private static volatile Connector instance;
    private Connection conn;
    private volatile Statement statement;

    static Connection getInstance() {
        Connector localInstance = instance;
        if (localInstance == null) {
            synchronized (Connector.class) {
                localInstance = instance;
                if (localInstance == null) {
                    instance = localInstance = new Connector();
                }
            }
        }
        return localInstance.conn;
    }

    private Connector(){
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            conn = DriverManager.getConnection("jdbc:hsqldb:file:testdb");
            statement = conn.createStatement();
            createDB();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    private void createDB() throws SQLException {
        statement.execute("CREATE TABLE if NOT EXISTS PUBLIC.CUSTOMERS(" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "NAME VARCHAR(30)," +
                "FNAME VARCHAR(30)," +
                "SNAME VARCHAR(30)," +
                "PHONE BIGINT)");
        statement.execute("CREATE TABLE if NOT EXISTS PUBLIC.ORDERS(" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY," +
                "DESCRIPTION VARCHAR(300) NOT NULL,CUSTOMER BIGINT NOT NULL,START TIMESTAMP NOT NULL," +
                "ENDDATE TIMESTAMP,COST DOUBLE,STATUS VARCHAR(30) NOT NULL," +
                "CONSTRAINT FOREING_KEY_FOR_CUSTOMER FOREIGN KEY(CUSTOMER) REFERENCES PUBLIC.CUSTOMERS(ID))");
    }

    public static void main(String[] args) {
        OrderService orderService = OrderService.getInstance();
        Order order;
        try {
            order = orderService.get(17);
            System.out.println(order.toString());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}
